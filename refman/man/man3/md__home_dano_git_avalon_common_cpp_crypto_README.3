.TH "md__home_dano_git_avalon_common_cpp_crypto_README" 3 "Wed May 6 2020" "Version 0.5.0.dev1" "Hyperledger Avalon" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_dano_git_avalon_common_cpp_crypto_READMEREADME 
 \- 
.SH "Common Crypto library documentation "
.PP
.PP
This \fCcommon/cpp/crypto/\fP directory contains cryptographic code used by untrusted and trusted (Intel SGX Enclave) code\&.
.PP
This code is written in C++, but a Python wrapper is also available (see \&.\&./README\&.md '\&.\&./README\&.md')
.PP
Avalon applications are free to use third-party cryptographic implementations (such as what a programming language binding may provide) or the cryptographic interfaces provided here\&.
.PP
.SS "Software Components Required "
.PP
OpenSSL 1\&.1 library and Intel SGX OpenSSL library built from OpenSSL 1\&.1:
.PP
.IP "\(bu" 2
https://www.openssl.org/
.IP "\(bu" 2
https://github.com/intel/intel-sgx-ssl
.PP
.PP
.SS "Cryptographic Primitives Used "
.PP
Primitive Algorithm Keysize Comments  Digital signature ECDSA-SECP256K1 256 (1) (2) Asymmetric encryption RSA-OAEP 3072 (1) Authenticated encryption AES-GCM 256 96b IV, 128b tag Digest SHA-256 256 (2) Digest KECCACK 256 (2) Differs from SHA-3 (1) Not PQ resistant
.PP
(2) Blockchain legacy algorithm
.PP
.SS "Cryptographic Primitive Usage "
.PP
.IP "\(bu" 2
\fBSHA-256\fP Computing digests of the work order request and response
.IP "\(bu" 2
\fBKECCAK-256\fP Computing digests of the work order request and response or Ethereum raw transactions Packet bytes
.IP "\(bu" 2
\fBAES-GCM-256\fP Encrypts data items within work order request and response\&. It also used to encrypt a request digest and custom data encryption keys
.IP "\(bu" 2
\fBRSA-OAEP-3072\fP Encrypt symmetric data encryption keys
.IP "\(bu" 2
\fBECSDA-SECP256K1\fP Signs work order response digest and workerâ€™s encryption RSA-OAEP public key
.PP
.PP
.SS "Implementation of Cryptographic Elements "
.PP
Cryptographic elements include cryptographic keys, signature, ciphertexts, plaintexts, hashes, and random bitstrings\&.
.PP
Element Implementation Representation Serialize/Deserialize function?  ECDSA public key C++ class Custom object Yes, PEM encoding and 65-byte Bitcoin Hex format ECDSA private key C++ class Custom object Yes, PEM encoding ECDSA signature C++ string DER binary No, user defined RSA public key C++ class Custom object Yes, PEM encoding RSA private key C++ class Custom object Yes, PEM encoding RSA ciphertext C++ string raw binary No, user defined RSA plaintext C++ string raw binary No, user defined AES-GCM key C++ string raw binary No, user defined AES-GCM iv C++ string raw binary No, user defined AES-GCM ciphertext+tag C++ string raw binary No, user defined AES-GCM plaintext C++ string raw binary No, user defined SHA-256 digest C++ string raw binary No, user defined Random bitstring C++ string raw binary No, user defined 
.SS "Security notes "
.PP
.IP "\(bu" 2
\fBAES-GCM\fP When using of AES-GCM inside Intel SGX enclaves to preserve confidentiality and integrity of data to be stored outside of the Intel SGX enclaves a different unique or random 12-byte IV must be used for each encrypted message\&. At most 2^32 distinct IVs can be used until the key needs to be regenerated for security\&. This limitation can possibly be mitigated in the future by using alternatives to AES-GCM like AES-GCM SIV\&. 
.PP

